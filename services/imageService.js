import { createCanvas } from 'canvas';
import fs from 'fs';
import path from 'path';
import Country from '../models/Country.js';
import CountryService from './countryService.js';

class ImageService {
  /**
   * Generate summary image
   */
  static async generateSummaryImage() {
    try {
      // Get data
      const totalCountries = await Country.count();
      const topCountries = await Country.getTopByGDP(5);
      const lastRefreshed = await CountryService.getLastRefreshedAt();

      // Create canvas
      const width = 800;
      const height = 600;
      const canvas = createCanvas(width, height);
      const ctx = canvas.getContext('2d');

      // Background
      ctx.fillStyle = '#f9fafb';
      ctx.fillRect(0, 0, width, height);

      // Header background
      const gradient = ctx.createLinearGradient(0, 0, width, 150);
      gradient.addColorStop(0, '#667eea');
      gradient.addColorStop(1, '#764ba2');
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, width, 150);

      // Title
      ctx.fillStyle = '#ffffff';
      ctx.font = 'bold 36px Arial';
      ctx.textAlign = 'center';
      ctx.fillText('Country Currency Summary', width / 2, 60);

      // Subtitle
      ctx.font = '20px Arial';
      ctx.fillText(`Total Countries: ${totalCountries}`, width / 2, 100);

      // Last refreshed
      ctx.font = '16px Arial';
      const refreshText = lastRefreshed 
        ? `Last Updated: ${new Date(lastRefreshed).toLocaleString()}`
        : 'Never refreshed';
      ctx.fillText(refreshText, width / 2, 130);

      // Top 5 Countries section
      ctx.fillStyle = '#1f2937';
      ctx.font = 'bold 28px Arial';
      ctx.textAlign = 'left';
      ctx.fillText('Top 5 Countries by Estimated GDP', 50, 210);

      // Draw line separator
      ctx.strokeStyle = '#667eea';
      ctx.lineWidth = 3;
      ctx.beginPath();
      ctx.moveTo(50, 230);
      ctx.lineTo(width - 50, 230);
      ctx.stroke();

      // List top countries
      let yPosition = 280;
      ctx.font = '20px Arial';
      
      topCountries.forEach((country, index) => {
        // Rank circle
        ctx.fillStyle = '#667eea';
        ctx.beginPath();
        ctx.arc(70, yPosition - 5, 18, 0, Math.PI * 2);
        ctx.fill();

        // Rank number
        ctx.fillStyle = '#ffffff';
        ctx.font = 'bold 16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(String(index + 1), 70, yPosition + 2);

        // Country name
        ctx.fillStyle = '#1f2937';
        ctx.font = 'bold 20px Arial';
        ctx.textAlign = 'left';
        ctx.fillText(country.name, 110, yPosition);

        // GDP value
        ctx.fillStyle = '#6b7280';
        ctx.font = '18px Arial';
        const gdpFormatted = country.estimated_gdp 
          ? `$${this.formatNumber(country.estimated_gdp)}`
          : 'N/A';
        ctx.fillText(gdpFormatted, 110, yPosition + 25);

        yPosition += 70;
      });

      // Footer
      ctx.fillStyle = '#9ca3af';
      ctx.font = '14px Arial';
      ctx.textAlign = 'center';
      ctx.fillText('Generated by Country Currency API', width / 2, height - 30);

      // Save image
      const cacheDir = process.env.CACHE_DIR || './cache';
      if (!fs.existsSync(cacheDir)) {
        fs.mkdirSync(cacheDir, { recursive: true });
      }

      const imagePath = path.join(cacheDir, 'summary.png');
      const buffer = canvas.toBuffer('image/png');
      fs.writeFileSync(imagePath, buffer);

      console.log(`âœ… Summary image generated at ${imagePath}`);
      return imagePath;
    } catch (error) {
      console.error('Error generating summary image:', error.message);
      throw error;
    }
  }

  /**
   * Format large numbers with commas
   */
  static formatNumber(num) {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  }

  /**
   * Get summary image path
   */
  static getSummaryImagePath() {
    const cacheDir = process.env.CACHE_DIR || './cache';
    return path.join(cacheDir, 'summary.png');
  }

  /**
   * Check if summary image exists
   */
  static summaryImageExists() {
    return fs.existsSync(this.getSummaryImagePath());
  }
}

export default ImageService;